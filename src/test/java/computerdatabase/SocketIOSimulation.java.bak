package computerdatabase;

import static io.gatling.javaapi.core.CoreDsl.*;
import static io.gatling.javaapi.http.HttpDsl.*;

import io.gatling.javaapi.core.*;
import io.gatling.javaapi.http.*;

public class SocketIOSimulation extends Simulation {

    HttpProtocolBuilder httpProtocol = http
            .baseUrl("http://localhost:3000")
            // .acceptHeader("text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8")
            // .doNotTrackHeader("1")
            // .acceptLanguageHeader("en-US,en;q=0.5")
            // .acceptEncodingHeader("gzip, deflate")
            // .userAgentHeader("Gatling2")
            // .wsBaseUrl("wss://ws.postman-echo.com")
            .wsBaseUrl("ws://localhost:3000")
            .wsReconnect()
            .wsMaxReconnects(5)
            .wsAutoReplySocketIo4()
    //
    ;

    private static Session printSessionValue(Session session, String key) {
        System.out.println("session: " + key + ": " + session.get(key));
        return session;
    }

    public static ChainBuilder connectToURL(String url, WsFrameCheck checkMessage) {
        return exec(ws("connect")
                .connect(url).await(30).on(checkMessage)
                .onConnected(exec(session -> {
                    // System.out.println("CONNECTED");
                    return session;
                })));
    }

    public static ChainBuilder sendMessage(String sendString) {
        return exec(ws("sendMessage")
                .sendText(sendString));
    }

    public static ChainBuilder sendMessage(String sendString, int time, WsFrameCheck wsCheck) {
        return exec(ws("sendMessage")
                .sendText(sendString).await(time).on(wsCheck));
    }

    WsFrameCheck checkConnectionMessage = ws.checkTextMessage("checkConnectionMessage")
            .check(regex("\"sid\":\"([^\"]+)").saveAs("sid"));

    WsFrameCheck checkSocketIOConnectionMessage = ws.checkTextMessage("checkSockerIOConnectionMessage")
            .check(regex("40.\"sid\":\"([^\"]+).").saveAs("40sid"));

    WsFrameCheck checkSendMessage = ws.checkTextMessage("checkSendMessage")
            .check(regex("they say: ([^\"]*)").saveAs("myMessage"));

    ScenarioBuilder scene = scenario("WebSocket")
            .exec(connectToURL("/socket.io/?EIO=4&transport=websocket", checkConnectionMessage))
            .exec(session -> printSessionValue(session, "sid"))

            /**
             * to connect to the socket.io server, send the following message:
             */
            .exec(sendMessage("40", 15, checkSocketIOConnectionMessage)) // connect to socket.io
            .exec(session -> printSessionValue(session, "40sid"))

            .repeat(1, "counter").on(
                    /**
                     * to send a message to the socket.io server, send the following message:
                     */
                    sendMessage("42[\"message\",\"Hi #{counter}\"]", 10, checkSendMessage)
                            .exec(session -> printSessionValue(session, "myMessage")))
            .pause(10)

            /**
             * to disconnect from the socket.io server, send the following message:
             */
            .exec(sendMessage("41")) // disconnect from socket.io
            .exec(ws("closeConnection").close());

    {
        setUp(scene.injectOpen(
                atOnceUsers(1)
        // nothingFor(4), // 1
        // atOnceUsers(10), // 2
        // rampUsers(10).during(5), // 3
        // constantUsersPerSec(20).during(15), // 4
        // constantUsersPerSec(20).during(15).randomized(), // 5
        // rampUsersPerSec(10).to(20).during(10), // 6
        // rampUsersPerSec(10).to(200).during(10).randomized(), // 7
        // stressPeakUsers(10000).during(20) // 8            
        ).protocols(httpProtocol));
    }
}
